// Prisma schema for Auth.js v5 with PrismaAdapter + Time logging
// Default to SQLite; can be swapped to PostgreSQL/MySQL

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  EMPLEADO
  ENCARGADO
  DUENO
  VISITANTE
}

model User {
  id            String   @id @default(cuid())
  name          String?
  gameName      String?
  email         String?  @unique
  emailVerified DateTime?
  image         String?
  role          Role     @default(EMPLEADO)
  active        Boolean  @default(true)
  disabledAt    DateTime?
  currentShiftStart DateTime?
  accounts      Account[]
  sessions      Session[]
  timeLogs      TimeLog[]
  workSessions  WorkSession[]
  absences      Absence[]
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?  @map("refreshToken")
  access_token      String?  @map("accessToken")
  expires_at        Int?     @map("expiresAt")
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  oauth_token_secret String? @map("oauthTokenSecret")
  oauth_token       String?  @map("oauthToken")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model TimeLog {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  type      String   // "IN" | "OUT"
  note      String?
  createdAt DateTime @default(now())
}

model WorkSession {
  id         String   @id @default(cuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  startedAt  DateTime
  endedAt    DateTime
  durationMs Int
  note       String?
  createdAt  DateTime @default(now())
}

// Configuraci√≥n simple de clave/valor para la app (logo, etc.)
model Config {
  key       String  @id
  value     String?
  updatedAt DateTime @updatedAt
}

// Ausencias planificadas o en curso por usuario
model Absence {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  startAt   DateTime
  endAt     DateTime
  reason    String?
  createdAt DateTime @default(now())
}
